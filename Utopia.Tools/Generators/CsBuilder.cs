using System.Diagnostics;
using System.Text;

namespace Utopia.Tools.Generators;

public class CsBuilder
{
    private int _alignCount = 0;

    private string _Align
    {
        get
        {
            return new string(' ', _alignCount * 4);
        }
    }

    public List<string> Usings = new();

    public string? Namespace = null;

    public List<string> Lines = new();

    public Type? Generator = null;

    public string[] Source;

    public void AddClass(string className, bool isPublic = false, bool isStatic = false,bool isPartial = false, params string[] parentClass)
    {
        var pub = isPublic ? "public" : string.Empty;
        var sat = isStatic ? "static" : string.Empty;
        var prt = isPartial ? "partial" : string.Empty;

        var parent = parentClass.Length == 0 ? string.Empty : " : ";
        foreach (var c in parentClass)
        {
            parent += $"{c},";
        }
        if (parentClass.Length != 0)
        {
            parent = parent[0..^1];
        }

        this.Lines.Add($"{this._Align}{pub} {sat} {prt} class {className} {parent}");
        this.BeginCodeBlock();
    }

    public void BeginCodeBlock()
    {
        this.Lines.Add("{");
        this._alignCount++;
    }

    public void CloseCodeBlock()
    {
        if(this._alignCount <= 0)
        {
            throw new InvalidOperationException("all blocks have been closed");
        }

        this._alignCount--;
        this.Lines.Add("}");
    }

    public void AddComment(string comment,bool forceMultiline = false)
    {
        var lines = comment.Split(new[] { '\r', '\n' });
        if(lines.Length == 1 && (!forceMultiline))
        {
            this.Lines.Add($"{this._Align}// {comment}");
        }
        else
        {
            this.Lines.Add($"{this._Align}/*");
            foreach(var line in lines)
            {
                this.Lines.Add($"{this._Align} * {line}");
            }
            this.Lines.Add($"{this._Align} */");
        }
    }

    public void AddLine(string line,int alignFix = 0)
    {
        var origin = this._alignCount;
        this._alignCount = origin + alignFix;
        this.Lines.Add($"{this._Align}{line}");
        this._alignCount = origin;
    }

    public void AddProperty(string accessibility,string type,string name,bool isStatic = false)
    {
        var @static = isStatic ? "static" : string.Empty;

        this.Lines.Add($"{this._Align}{accessibility} {@static} {type} {name} {{ get; set; }}");
    }

    public void AddField(string accessibility,string type,string name,string? defaultValue = null,bool isReadonly = false,bool isStatic = false)
    {
        var @static = isStatic? "static" : string.Empty;
        var @readonly = isReadonly ? "readonly" : string.Empty;
        var @value = defaultValue != null ? " = " + defaultValue : string.Empty;

        this.Lines.Add($"{this._Align}{accessibility} {@static} {@readonly} {type} {name}{@value};");
    }

    public string Generate()
    {
        StringBuilder sb = new();

        sb.AppendLine("// This file was generated by source generator:" + this.Generator?.FullName ?? string.Empty);
        sb.AppendLine("// This file was generated from file:");

        foreach(var source in this.Source)
        {
            sb.AppendLine("// " + source);
        }
        sb.AppendLine();

        foreach (var s in this.Usings)
        {
            sb.Append("using ").Append(s).AppendLine(";");
        }

        if (this.Namespace != null)
        {
            sb.AppendLine($"namespace {this.Namespace};");
        }

        sb.AppendLine();

        foreach (var s in this.Lines)
        {
            sb.AppendLine(s);
        }

        return sb.ToString();
    }

    public CsBuilder(params string[] source)
    {
        var methodInfo = new StackTrace().GetFrame(1)?.GetMethod();
        this.Generator = methodInfo?.ReflectedType;
        this.Source = source;
    }
}
